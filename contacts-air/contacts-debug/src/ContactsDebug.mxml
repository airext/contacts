<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark" creationComplete="creationCompleteHandler(event)">

    <fx:Script>
        <![CDATA[
        import com.github.rozd.ane.Contacts;
        import com.github.rozd.ane.core.Response;
        import com.github.rozd.ane.core.contacts;
        import com.github.rozd.ane.data.Range;

        import mx.events.FlexEvent;

        use namespace contacts;

        [Bindable]
        private var bmd:BitmapData;

        private var contacts:Array;

        private function isModified_clickHandler(event:MouseEvent):void
        {
            var result:Boolean = Contacts.getInstance().isModified(new Date(2012));

            trace(result);
        }

        private function getContacts_clickHandler(event:MouseEvent):void
        {
            var t:Number = getTimer();

            var result:Array = Contacts.getInstance().getContacts(new com.github.rozd.ane.data.Range());

            trace("elapsed:", getTimer() - t);

            contacts = result;

            bmd = result[0].thumbnail;

            trace(result[0].emails.length > 0 ? result[0].emails[0] : "");

            trace(result ? result.length : 0, result);
        }

        private function getContactCount_clickHandler(event:MouseEvent):void
        {
            var result:int = Contacts.getInstance().getContactCount();

            trace(result);
        }

        private function isModifiedAsync_clickHandler(event:MouseEvent):void
        {
            Contacts.getInstance().isModifiedAsync(new Date(2012),
                                                   new Response(
                                                           function (data:Object):void
                                                           {
                                                               trace(data);
                                                           },
                                                           function (info:Object):void
                                                           {
                                                               trace(info)
                                                           })
            );
        }

        private function getContactsAsync_clickHandler(event:MouseEvent):void
        {
            var t:Number = getTimer();

            Contacts.getInstance().getContactsAsync(new com.github.rozd.ane.data.Range(), null,
                                                    new Response(
                                                            function (data:Object):void
                                                            {
                                                                trace("elapsed:", getTimer() - t);

                                                                contacts = data as Array;
                                                            },
                                                            function (info:Object):void
                                                            {
                                                                trace(info)
                                                            })
            );

        }

        private function traceContacts(contacts:Object):String
        {
            var str:String = "";

            for each (var contact in contacts)
            {
                str += contact.compositeName + ", ";
            }

            return str;
        }

        private function getContactCountAsync_clickHandler(event:MouseEvent):void
        {
            Contacts.getInstance().getContactCountAsync(
                    new Response(
                            function (data:Object):void
                            {
                                trace(data);
                            },
                            function (info:Object):void
                            {
                                trace(info)
                            })
            );
        }

        private function pickIsModifiedResult_clickHandler(event:MouseEvent):void
        {
            trace(Contacts.getInstance().pickIsModifiedResult(0));
        }

        private function pickGetContactsResult_clickHandler(event:MouseEvent):void
        {
            trace(Contacts.getInstance().pickGetContactsResult(0));
        }

        private function pickContactCountResult_clickHandler(event:MouseEvent):void
        {
            trace(Contacts.getInstance().pickGetContactCountResult(0));
        }

        private function creationCompleteHandler(event:FlexEvent):void
        {
            Contacts.getInstance().addEventListener(StatusEvent.STATUS, statusHandler);
        }

        private function statusHandler(event:StatusEvent):void
        {
            trace(event.code, event.level);
        }

        private function updateContact_clickHandler(event:MouseEvent):void
        {
            var contact:Object = contacts[0];

            if (contact.firstName)
                contact.firstName += "*";

            if (contact.lastName)
                contact.lastName += "*";

            if (contact.middleName)
                contact.middleName += "*";

            if (contact.prefix)
                contact.prefix += "*";

            if (contact.suffix)
                contact.suffix += "*";

            if (contact.nickname)
                contact.nickname += "*";

            if (contact.firstNamePhonetic)
                contact.firstNamePhonetic += "*";

            if (contact.lastNamePhonetic)
                contact.lastNamePhonetic += "*";

            if (contact.middleNamePhonetic)
                contact.middleNamePhonetic += "*";

            if (contact.organization)
                contact.organization += "*";

            if (contact.jobTitle)
                contact.jobTitle += "*";

            if (contact.department)
                contact.department += "*";

            if (contact.note)
                contact.note += "*";

            var hasMobitile:Boolean = false;

            for each (var profile in contact.profiles)
            {
//                if (profile.service)
//                    profile.service += "*";

                hasMobitile = hasMobitile || profile.service == "Mobitile";

                if (profile.url)
                    profile.url += "*";

                if (profile.username)
                    profile.username += "*";
            }

            if (!hasMobitile)
            {
                contact.profiles ||= [];
                contact.profiles.push({"service":"Mobitile", "username":"rozd", "url":"http://mobitile.com/rozd"});
            }

            for each (var address in contact.address)
            {
                for (var p:String in address)
                {
                    if (address[p] is String)
                        address[p] += "*";
                }
            }

            for each (var email in contact.emails)
            {
                email.value += "*";
            }

            for each (var phone in contact.phones)
            {
                phone.value += "*";
            }

            Contacts.getInstance().updateContact(contact);
        }
        ]]>
    </fx:Script>

    <s:layout>
        <s:VerticalLayout paddingTop="20" paddingBottom="20" horizontalAlign="center" />
    </s:layout>

    <!--<s:Image source="{bmd}" />-->

    <s:Button label="updateContact" click="updateContact_clickHandler(event)" />

    <s:Button label="isModified" click=" isModified_clickHandler(event)" />

    <s:Button label="getContacts" click="getContacts_clickHandler(event)" />

    <s:Button label="getContactCount" click="getContactCount_clickHandler(event)" />

    <s:Button label="isModifiedAsync" click="isModifiedAsync_clickHandler(event)" />
    <s:Button label="pickIsModifiedResult" click="pickIsModifiedResult_clickHandler(event)" />

    <s:Button label="getContactsAsync" click="getContactsAsync_clickHandler(event)" />
    <s:Button label="pickGetContactsResult" click="pickGetContactsResult_clickHandler(event)" />

    <s:Button label="getContactCountAsync" click="getContactCountAsync_clickHandler(event)" />
    <s:Button label="pickContactCountResult" click="pickContactCountResult_clickHandler(event)" />

</s:Application>
